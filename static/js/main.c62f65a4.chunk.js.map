{"version":3,"sources":["components/Fader.js","firebaseInit.js","components/Notifications/Notifications.js","components/Notifications/ReactNotification.js","App.js","reportWebVitals.js","index.js"],"names":["Fader","text","useState","fade","fadeProp","setFadeProp","useEffect","timeout","setInterval","clearInterval","className","defaultProps","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","getToken","setTokenFound","a","currentToken","vapidKey","console","log","Notifications","props","isTokenFound","data","axios","method","url","headers","then","response","error","tokenFunc","propTypes","ReactNotificationComponent","title","body","Display","toast","info","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","App","show","setShow","notification","setNotification","Promise","resolve","onMessage","payload","catch","err","ReactNotification","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c62f65a4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport '../App.css'\n\nconst Fader = ({ text }) => {\n\n    const [fadeProp, setFadeProp] = useState({\n        fade: 'fade-in',\n    });\n\n    useEffect(() => {\n        const timeout = setInterval(() => {\n            if (fadeProp.fade === 'fade-in') {\n                setFadeProp({\n                    fade: 'fade-out'\n                })\n            } else {\n                setFadeProp({\n                    fade: 'fade-in'\n                })\n            }\n        }, 4000);\n\n        return () => clearInterval(timeout)\n    }, [fadeProp])\n\n    return (\n        <>\n            <h1 className={fadeProp.fade}>{text}</h1>\n        </>\n    )\n}\n\nFader.defaultProps = {\n    text: 'Hello World!'\n}\n\nFader.propTypes = {\n    text: PropTypes.string,\n}\n\nexport default Fader\n","import firebase from \"firebase/app\";\nimport \"firebase/messaging\";\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyApbNtcE9vZm0PAXwt_vDyatD-R2O_0aLU\",\n  authDomain: \"fir-example-lacit.firebaseapp.com\",\n  projectId: \"fir-example-lacit\",\n  storageBucket: \"fir-example-lacit.appspot.com\",\n  messagingSenderId: \"809172351904\",\n  appId: \"1:809172351904:web:e0d16e1a843dcd10a902c5\",\n  measurementId: \"G-WB4W65ND11\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst messaging = firebase.messaging();\n\n// const { REACT_APP_VAPID_KEY } = process.env;\nconst publicKey = \"BKL0vtChkdS4SQhOigCq1q6hesW4Xl7C4bOM89TzSwPj-ThD09ateiv_eoMid-yokDECEOP1mNGLwZwHCWNW21s\";\n\nexport const getToken = async (setTokenFound) => {\n  let currentToken = \"\";\n\n  try {\n    currentToken = await messaging.getToken({ vapidKey: publicKey });\n    if (currentToken) {\n      setTokenFound(true);\n    } else {\n      setTokenFound(false);\n    }\n  } catch (error) {\n    console.log(\"An error occurred while retrieving token. \", error);\n  }\n\n  return currentToken;\n};\n\nexport const onMessageListener = () =>\n  new Promise((resolve) => {\n    messaging.onMessage((payload) => {\n      resolve(payload);\n    });\n  });\n","import React, { useState, useEffect } from \"react\";\nimport { getToken } from \"../../firebaseInit.js\";\nimport axios from \"axios\";\n\nconst Notifications = (props) => {\n  const [isTokenFound, setTokenFound] = useState(false);\n\n  console.log(\"Token found\", isTokenFound);\n\n  // To load once\n  useEffect(() => {\n    let data;\n\n    async function tokenFunc() {\n      data = await getToken(setTokenFound);\n      if (data) {\n        console.log(\"Token is \", data);\n        axios({\n          method: 'post',\n          url: 'https://tomcat.vit.belwest.com/firebase-back/firebase/token',\n          headers:{\n            \"Content-Type\": \"text/plain\"\n          },\n          data: data\n        }).then((response) => {\n          console.log(response);\n        }, (error) => {\n          console.log(error);\n        });\n      }\n      return data;\n    }\n\n    tokenFunc();\n  }, [setTokenFound]);\n\n  return <></>;\n};\n\nNotifications.propTypes = {};\n\nexport default Notifications;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst ReactNotificationComponent = ({ title, body }) => {\n  let hideNotif = title === \"\";\n\n  if (!hideNotif) {\n    toast.info(<Display />);\n  }\n\n  function Display() {\n    return (\n      <div>\n        <h4>{title}</h4>\n        <p>{body}</p>\n      </div>\n    );\n  }\n\n  return (\n    <ToastContainer\n      autoClose={3000}\n      hideProgressBar\n      newestOnTop={false}\n      closeOnClick\n      rtl={false}\n      pauseOnFocusLoss={false}\n      draggable\n      pauseOnHover={false}\n    />\n  );\n};\n\nReactNotificationComponent.defaultProps = {\n  title: \"This is title\",\n  body: \"Some body\",\n};\n\nReactNotificationComponent.propTypes = {\n  title: PropTypes.string,\n  body: PropTypes.string,\n};\n\nexport default ReactNotificationComponent;\n","import \"./App.css\";\nimport Fader from \"./components/Fader\";\n\nimport React, { useState } from \"react\";\nimport { onMessageListener } from \"./firebaseInit\";\nimport Notifications from \"./components/Notifications/Notifications\";\nimport ReactNotificationComponent from \"./components/Notifications/ReactNotification\";\n\nfunction App() {\n\n  const [show, setShow] = useState(false);\n  const [notification, setNotification] = useState({ title: \"\", body: \"\" });\n\n  console.log(show, notification);\n\n  onMessageListener()\n    .then((payload) => {\n      setShow(true);\n      setNotification({\n        title: payload.notification.title,\n        body: payload.notification.body,\n      });\n      console.log(payload);\n    })\n    .catch((err) => console.log(\"failed: \", err));\n\n  return (\n    <div className=\"App\">\n      {show ? (\n        <ReactNotificationComponent\n          title={notification.title}\n          body={notification.body}\n        />\n      ) : (\n        <></>\n      )}\n      <Notifications />\n      <Fader text=\"Hello React\"></Fader>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nreportWebVitals();\n"],"sourceRoot":""}